#
[General]
## The LDAP group(s) whose members are considered admins of the app
##   This should be a comman separated list of groups which will be turned
##   into a python list
admins:             admins-group1, admin-group2

## This is the lifetime of the session in seconds
session.lifetime:   300
 
## App specific configuration: The service is designed to be used by other
##  apps - ala OAuth2 model - the allowed apps are expected to have a configuration
##  in this folder (relative to current path). See app-config.example for example
##  configurations.
apps:               apps

## IP address lockout time
### Slow the hackers down by this amount of time - don't bother checking or even
###  responding. This is time in seconds.
lockout.time:       300

[LDAP]
## LDAP Configuration
##  ldap_servers should be a comma separated list of ldap URI's
##  e.g. ldap://host1.DOMAIN, ldap://host2.DOMAIN
##
##  The app will convert this into a list and try them in sequence 
ldap.servers:   ldap://server1.example.com, ldap://server2.example.com

## The search base
search.base:    o=mygroup,dc=example,dc=com

## The user with which to bind to the tree: must be a DN
bind.user:      cn=user,ou=people,o=mygroup,dc=example,dc=com
bind.pass:      supersekrit

[MONGODB]
##  nodes: At least a couple of mongo nodes in the cluster. The client
##   retrieves the structure of the replica set from any node which it can connect to
##   so having at least a couple of nodes in the list will guard against node failure.
## This is a comma separated list and it will be turned into a python list by the app
##   and they will be tried in turn.
nodes:          IP.host1, IP.host2, IP.host3
user:           username
pass:           password
db:             database_name
replica.set:    prod01
write.concern:  3
